// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StatsNow.Models;

namespace StatsNow.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200219170240_GameModelUpdate")]
    partial class GameModelUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StatsNow.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "SuperLeague"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Junior"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "u20"
                        });
                });

            modelBuilder.Entity("StatsNow.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Away")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("FG")
                        .HasColumnType("int");

                    b.Property<int>("FGA")
                        .HasColumnType("int");

                    b.Property<int>("FGperC")
                        .HasColumnType("int");

                    b.Property<string>("Home")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<bool>("IsGamesOfTheSeason")
                        .HasColumnType("bit");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Win")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Away = "Maree",
                            AwayScore = 70,
                            CategoryId = 1,
                            FG = 0,
                            FGA = 0,
                            FGperC = 0,
                            Home = "Moycullen",
                            HomeScore = 58,
                            IsGamesOfTheSeason = false,
                            Venue = "Kingfisher",
                            Win = "No"
                        },
                        new
                        {
                            GameId = 2,
                            Away = "Moycullen",
                            AwayScore = 59,
                            CategoryId = 1,
                            FG = 0,
                            FGA = 0,
                            FGperC = 0,
                            Home = "Killester",
                            HomeScore = 57,
                            IsGamesOfTheSeason = true,
                            Venue = "IWA",
                            Win = "Yes"
                        },
                        new
                        {
                            GameId = 3,
                            Away = "DCU",
                            AwayScore = 87,
                            CategoryId = 1,
                            FG = 0,
                            FGA = 0,
                            FGperC = 0,
                            Home = "Moycullen",
                            HomeScore = 64,
                            IsGamesOfTheSeason = false,
                            Venue = "Kingfisher",
                            Win = "No"
                        },
                        new
                        {
                            GameId = 4,
                            Away = "Moycullen",
                            AwayScore = 73,
                            CategoryId = 1,
                            FG = 0,
                            FGA = 0,
                            FGperC = 0,
                            Home = "UCD",
                            HomeScore = 79,
                            IsGamesOfTheSeason = true,
                            Venue = "UCD",
                            Win = "No"
                        });
                });

            modelBuilder.Entity("StatsNow.Models.Game", b =>
                {
                    b.HasOne("StatsNow.Models.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
